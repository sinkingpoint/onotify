// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetAlertsData, GetAlertsError, GetAlertsResponse, PostAlertsData, PostAlertsError, PostAlertsResponse, GetAlertGroupsData, GetAlertGroupsError, GetAlertGroupsResponse, GetRequiredFilesError, GetRequiredFilesResponse, PostRequiredFilesData, PostRequiredFilesError, PostRequiredFilesResponse, GetSilencesError, GetSilencesResponse, PostSilenceData, PostSilenceError, PostSilenceResponse, PostConfigData, PostConfigError, PostConfigResponse, GetConfigError, GetConfigResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get a list of alerts
 */
export const getAlerts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetAlertsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAlertsResponse, GetAlertsError, ThrowOnError>({
        ...options,
        url: '/api/v2/alerts'
    });
};

/**
 * Add alerts to the system
 */
export const postAlerts = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostAlertsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAlertsResponse, PostAlertsError, ThrowOnError>({
        ...options,
        url: '/api/v2/alerts'
    });
};

/**
 * Get a list of alert groups
 */
export const getAlertGroups = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetAlertGroupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAlertGroupsResponse, GetAlertGroupsError, ThrowOnError>({
        ...options,
        url: '/api/v2/alerts/groups'
    });
};

/**
 * Get config files that are in the config, but haven't been uploaded yet
 */
export const getRequiredFiles = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRequiredFilesResponse, GetRequiredFilesError, ThrowOnError>({
        ...options,
        url: '/api/v1/config/required-files'
    });
};

/**
 * Upload an extra file required by the alertmanager spec
 */
export const postRequiredFiles = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostRequiredFilesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRequiredFilesResponse, PostRequiredFilesError, ThrowOnError>({
        ...options,
        url: '/api/v1/config/required-files'
    });
};

/**
 * Get a list of silences
 */
export const getSilences = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSilencesResponse, GetSilencesError, ThrowOnError>({
        ...options,
        url: '/api/v2/silences'
    });
};

/**
 * Add silences to the system
 */
export const postSilence = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostSilenceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSilenceResponse, PostSilenceError, ThrowOnError>({
        ...options,
        url: '/api/v2/silences'
    });
};

/**
 * Upload an Alertmanager config
 */
export const postConfig = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostConfigResponse, PostConfigError, ThrowOnError>({
        ...options,
        url: '/api/v1/config'
    });
};

/**
 * Get an uploaded alertmanager config
 */
export const getConfig = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetConfigResponse, GetConfigError, ThrowOnError>({
        ...options,
        url: '/api/v1/config'
    });
};