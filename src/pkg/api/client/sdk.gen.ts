// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAlertsData, GetAlertsResponse, PostAlertsData, GetStatsData, GetStatsResponse, GetAlertGroupsData, GetRequiredFilesData, GetRequiredFilesResponse, PostRequiredFilesData, GetSilenceData, GetSilenceResponse, GetSilencesData, GetSilencesResponse, PostSilenceData, GetConfigData, GetConfigResponse, PostConfigData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get a list of alerts
 */
export const getAlerts = <ThrowOnError extends boolean = false>(options?: Options<GetAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAlertsResponse, unknown, ThrowOnError>({
        url: '/api/v2/alerts',
        ...options
    });
};

/**
 * Add alerts to the system
 */
export const postAlerts = <ThrowOnError extends boolean = false>(options?: Options<PostAlertsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v2/alerts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a set of statistics
 */
export const getStats = <ThrowOnError extends boolean = false>(options: Options<GetStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatsResponse, unknown, ThrowOnError>({
        url: '/api/v2/{resourceType}/stats',
        ...options
    });
};

/**
 * Get a list of alert groups
 */
export const getAlertGroups = <ThrowOnError extends boolean = false>(options?: Options<GetAlertGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v2/alerts/groups',
        ...options
    });
};

/**
 * Get config files that are in the config, but haven't been uploaded yet
 */
export const getRequiredFiles = <ThrowOnError extends boolean = false>(options?: Options<GetRequiredFilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRequiredFilesResponse, unknown, ThrowOnError>({
        url: '/api/v1/config/required-files',
        ...options
    });
};

/**
 * Upload an extra file required by the alertmanager spec
 */
export const postRequiredFiles = <ThrowOnError extends boolean = false>(options?: Options<PostRequiredFilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/config/required-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a silence by ID
 */
export const getSilence = <ThrowOnError extends boolean = false>(options: Options<GetSilenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSilenceResponse, unknown, ThrowOnError>({
        url: '/api/v2/silence/{id}',
        ...options
    });
};

/**
 * Get a list of silences
 */
export const getSilences = <ThrowOnError extends boolean = false>(options?: Options<GetSilencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSilencesResponse, unknown, ThrowOnError>({
        url: '/api/v2/silences',
        ...options
    });
};

/**
 * Add silences to the system
 */
export const postSilence = <ThrowOnError extends boolean = false>(options?: Options<PostSilenceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v2/silences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get an uploaded alertmanager config
 */
export const getConfig = <ThrowOnError extends boolean = false>(options?: Options<GetConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigResponse, unknown, ThrowOnError>({
        url: '/api/v1/config',
        ...options
    });
};

/**
 * Upload an Alertmanager config
 */
export const postConfig = <ThrowOnError extends boolean = false>(options?: Options<PostConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};