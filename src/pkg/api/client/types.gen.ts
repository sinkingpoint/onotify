// This file is auto-generated by @hey-api/openapi-ts

export type GetAlertsData = {
    body?: never;
    path?: never;
    query?: {
        fingerprints?: Array<string>;
        /**
         * Show active alerts
         */
        active?: boolean;
        /**
         * Show silenced alerts
         */
        silenced?: boolean;
        /**
         * Show resolved alerts
         */
        resolved?: boolean;
        /**
         * Show muted alerts
         */
        muted?: boolean;
        /**
         * Show inhibited alerts
         */
        inhibited?: boolean;
        /**
         * Show unprocessed alerts
         */
        unprocessed?: boolean;
        /**
         * A list of matchers to filter by
         */
        filter?: Array<string>;
        /**
         * A regex matching receivers to filter by
         */
        receiver?: string;
        /**
         * The field to sort by
         */
        sort?: Array<'startsAt:asc' | 'endsAt:asc' | 'updatedAt:asc' | 'alertname:asc' | 'startsAt:desc' | 'endsAt:desc' | 'updatedAt:desc' | 'alertname:desc'>;
        /**
         * The maximum number of alerts to return
         */
        limit?: number;
        /**
         * The page of alerts to return
         */
        page?: number;
    };
    url: '/api/v2/alerts';
};

export type GetAlertsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetAlertsResponses = {
    /**
     * Successfully got alerts
     */
    200: Array<{
        /**
         * The fingerprint of the alert
         */
        fingerprint: string;
        /**
         * The labels of the alert
         */
        labels: {
            [key: string]: string;
        };
        /**
         * The annotations of the alert
         */
        annotations: {
            [key: string]: string;
        };
        /**
         * An RFC-3339 formatting time string indicating the time that this alert started firing
         */
        startsAt: string;
        /**
         * An RFC-3339 formatted timestamp indicating when the alert finishes firing
         */
        endsAt: string;
        /**
         * An RFC-3339 formatted timestamp indicating when the annotations of the alert were last updated
         */
        updatedAt: string;
        /**
         * The receivers that this alert is firing to
         */
        receivers: Array<{
            name: string;
        }>;
        /**
         * The state of the alert
         */
        status: {
            /**
             * An array of inhibition rules that inhibit this alert
             */
            inhibitedBy: Array<string>;
            /**
             * An array of silence ids that silence this alert
             */
            silencedBy: Array<string>;
            /**
             * Whether this alert is firing or supressed
             */
            state: 'active' | 'supressed';
        };
    }>;
};

export type GetAlertsResponse = GetAlertsResponses[keyof GetAlertsResponses];

export type PostAlertsData = {
    body?: Array<{
        /**
         * An RFC-3339 formatted timestamp indicating when the alert starts firing. Defaults to the time that we received the alert
         */
        startsAt?: string;
        /**
         * An RFC-3339 formatted timestamp indicating when the alert finishes firing
         */
        endsAt?: string;
        /**
         * The annotations on the alert (e.g. the value of the evaluation). These can change, but are fixed to the same alert
         */
        annotations: {
            [key: string]: string;
        };
        /**
         * The labels of the alert
         */
        labels: {
            [key: string]: string;
        };
        /**
         * An optional URL linking back to the origin of the alert
         */
        generatorURL?: string;
    }>;
    path?: never;
    query?: never;
    url: '/api/v2/alerts';
};

export type PostAlertsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PostAlertsResponses = {
    /**
     * Sucessfully pushed alerts
     */
    200: unknown;
};

export type GetStatsData = {
    body?: never;
    path: {
        /**
         * The type of statistics to retrieve
         */
        resourceType: 'alerts' | 'silences';
    };
    query?: {
        /**
         * The start time of the stats
         */
        startTime?: string;
        /**
         * The end time of the stats
         */
        endTime?: string;
        /**
         * The aggregation to use
         */
        aggregation?: 'count';
        /**
         * The interval to aggregate over
         */
        intervalSecs?: number;
        /**
         * If true, return the stats at the end time
         */
        instant?: boolean;
        /**
         * A list of matchers to filter by
         */
        filter?: Array<string>;
        expired?: boolean;
        active?: boolean;
        silenced?: boolean;
        inhibited?: boolean;
        muted?: boolean;
    };
    url: '/api/v2/{resourceType}/stats';
};

export type GetStatsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetStatsResponses = {
    /**
     * Sucessfully retrieved silences
     */
    200: {
        /**
         * The buckets of the stats
         */
        buckets: Array<{
            /**
             * The time of the bucket
             */
            time: string;
            value: number;
        }>;
    };
};

export type GetStatsResponse = GetStatsResponses[keyof GetStatsResponses];

export type GetAlertGroupsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If true, return alerts that are not silenced, inhibited, or muted
         */
        active?: boolean;
        /**
         * If true, return alerts that are silenced
         */
        silenced?: boolean;
        /**
         * If true, return alerts that are inhibited
         */
        inhibited?: boolean;
        /**
         * If true, return alerts that are muted
         */
        muted?: boolean;
        /**
         * A list of matchers to filter the alerts groups by. Only applies to the `group_by` alerts of the group
         */
        filter?: Array<string>;
        /**
         * A regex to filter alert group receivers by
         */
        receiver?: string;
    };
    url: '/api/v2/alerts/groups';
};

export type GetAlertGroupsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetAlertGroupsResponses = {
    /**
     * Successfully got alert groups
     */
    200: unknown;
};

export type GetRequiredFilesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config/required-files';
};

export type GetRequiredFilesErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetRequiredFilesResponses = {
    /**
     * the extra files required, as specified in the config
     */
    200: {
        /**
         * the secret files that need to be uploaded
         */
        secrets: Array<{
            /**
             * the path in the alertmanager config
             */
            path: string;
            /**
             * whether the path takes a directory (e.g. it's a glob)
             */
            isDir: boolean;
            /**
             * whether the file has already been uploaded
             */
            uploaded: boolean;
        }>;
        /**
         * the templates that need to be uploaded
         */
        templates: Array<{
            /**
             * the path in the alertmanager config
             */
            path: string;
            /**
             * whether the path takes a directory (e.g. it's a glob)
             */
            isDir: boolean;
            /**
             * whether the file has already been uploaded
             */
            uploaded: boolean;
        }>;
    };
};

export type GetRequiredFilesResponse = GetRequiredFilesResponses[keyof GetRequiredFilesResponses];

export type PostRequiredFilesData = {
    body?: {
        /**
         * the path that this file comes from
         */
        path: string;
        /**
         * the contents of the file
         */
        contents: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/config/required-files';
};

export type PostRequiredFilesErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PostRequiredFilesResponses = {
    /**
     * Successfully uploaded file
     */
    200: unknown;
};

export type GetSilenceData = {
    body?: never;
    path: {
        /**
         * The ID of the silence to retrieve
         */
        id: string;
    };
    query?: never;
    url: '/api/v2/silence/{id}';
};

export type GetSilenceErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetSilenceResponses = {
    /**
     * Sucessfully retrieved silence
     */
    200: {
        /**
         * The matchers that match the alerts that this silence should silence
         */
        matchers: Array<{
            name: string;
            value: string;
            isRegex: boolean;
            isEqual?: boolean;
        }>;
        /**
         * An RFC-3339 formatting time string indicating the time that this silence should start silencing alerts
         */
        startsAt: string;
        /**
         * An RFC-3339 formatting time string indicating the time that this silence should stop silencing alerts
         */
        endsAt: string;
        /**
         * Who created this silence
         */
        createdBy?: string;
        /**
         * A comment that describes the silence
         */
        comment?: string;
        /**
         * The ID assigned to the silence
         */
        id: string;
        /**
         * The state of the alert - whether or not it is actively silencing alerts
         */
        status: {
            state: 'expired' | 'active' | 'pending';
        };
        /**
         * An RFC-3339 formatted timestamp indicating when the silence was last updated
         */
        updatedAt: string;
    };
};

export type GetSilenceResponse = GetSilenceResponses[keyof GetSilenceResponses];

export type GetSilencesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A list of matchers to filter by
         */
        matcher?: Array<string>;
        /**
         * Show active silences
         */
        active?: boolean;
        /**
         * Show expired silences
         */
        expired?: boolean;
        /**
         * The fields to sort by
         */
        sort?: Array<'startsAt:asc' | 'endsAt:asc' | 'startsAt:desc' | 'endsAt:desc'>;
        /**
         * The maximum number of silences to return
         */
        limit?: number;
        /**
         * The page of silences to return
         */
        page?: number;
    };
    url: '/api/v2/silences';
};

export type GetSilencesErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetSilencesResponses = {
    /**
     * Sucessfully retrieved silences
     */
    200: Array<{
        /**
         * The matchers that match the alerts that this silence should silence
         */
        matchers: Array<{
            name: string;
            value: string;
            isRegex: boolean;
            isEqual?: boolean;
        }>;
        /**
         * An RFC-3339 formatting time string indicating the time that this silence should start silencing alerts
         */
        startsAt: string;
        /**
         * An RFC-3339 formatting time string indicating the time that this silence should stop silencing alerts
         */
        endsAt: string;
        /**
         * Who created this silence
         */
        createdBy?: string;
        /**
         * A comment that describes the silence
         */
        comment?: string;
        /**
         * The ID assigned to the silence
         */
        id: string;
        /**
         * The state of the alert - whether or not it is actively silencing alerts
         */
        status: {
            state: 'expired' | 'active' | 'pending';
        };
        /**
         * An RFC-3339 formatted timestamp indicating when the silence was last updated
         */
        updatedAt: string;
    }>;
};

export type GetSilencesResponse = GetSilencesResponses[keyof GetSilencesResponses];

export type PostSilenceData = {
    body?: {
        /**
         * The matchers that match the alerts that this silence should silence
         */
        matchers: Array<{
            name: string;
            value: string;
            isRegex: boolean;
            isEqual?: boolean;
        }>;
        /**
         * An RFC-3339 formatting time string indicating the time that this silence should start silencing alerts
         */
        startsAt: string;
        /**
         * An RFC-3339 formatting time string indicating the time that this silence should stop silencing alerts
         */
        endsAt: string;
        /**
         * Who created this silence
         */
        createdBy?: string;
        /**
         * A comment that describes the silence
         */
        comment?: string;
        /**
         * The ID of the silence to update
         */
        id?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v2/silences';
};

export type PostSilenceErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PostSilenceResponses = {
    /**
     * Sucessfully pushed silence
     */
    200: unknown;
};

export type GetConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/config';
};

export type GetConfigErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type GetConfigResponses = {
    /**
     * An Alertmanager compatible config file
     */
    200: {
        /**
         * the global configs, used as defaults in all receivers
         */
        global?: {
            /**
             * The default SMTP `from` header field.
             */
            smtp_from?: string;
            /**
             * The default SMTP smarthost used for sending emails, including port number.
             */
            smtp_smarthost?: string;
            /**
             * The default hostname to identify to the SMTP server.
             */
            smtp_hello?: string;
            /**
             * SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
             */
            smtp_auth_username?: string;
            /**
             * The password to use to authenticate against the SMTP server, using PLAIN. Mutually exclusive with smtp_auth_password_file
             */
            smtp_auth_password?: string;
            /**
             * The password to use to authenticate against the SMTP server, loaded from a file, using PLAIN. Mutually exclusive with smtp_auth_password_file
             */
            smtp_auth_password_file?: string;
            /**
             * SMTP Auth using PLAIN.
             */
            smtp_auth_identity?: string;
            /**
             * SMTP Auth using CRAM-MD5.
             */
            smtp_auth_secret?: string;
            /**
             * The default SMTP TLS requirement.
             */
            smtp_require_tls?: boolean;
            /**
             * The default URL to use when sending messages to slack
             */
            slack_api_url?: string;
            /**
             * The default URL to use when sending messages to slack, loaded from a file
             */
            slack_api_url_file?: string;
            /**
             * The default api key to use when sending messages to victorops
             */
            victorops_api_key?: string;
            /**
             * The default api key to use when sending messages to victorops, loaded from a file
             */
            victorops_api_key_file?: string;
            /**
             * The default URL to use when sending messages to VictorOps
             */
            victorops_api_url?: string;
            /**
             * The default URL to use when sending messages to Pagerduty
             */
            pagerduty_url?: string;
            /**
             * The default API Key to use when sending messages to OpsGenie
             */
            opsgenie_api_key?: string;
            /**
             * The default API Key to use when sending messages to OpsGenie, loaded from a file
             */
            opsgenie_api_key_file?: string;
            /**
             * The default URL to use when sending messages to OpsGenie
             */
            opsgenie_api_url?: string;
            /**
             * The default URL to use when sending messages to WeChat
             */
            wechat_api_url?: string;
            /**
             * The default API Key to use when sending messages to WeChat
             */
            wechat_api_secret?: string;
            /**
             * The default Corp ID to use when sending messages to WeChat
             */
            wechat_api_corp_id?: string;
            /**
             * The default URL to use when sending messages to Telegram
             */
            telegram_api_url?: string;
            /**
             * The default URL to use when sending messages to WebEx
             */
            webex_api_url?: string;
            /**
             * settings to configure the behaviour of HTTP requests
             */
            http_config?: {
                /**
                 * Sets the `Authorization` header with the configured username and password
                 */
                basic_auth?: {
                    /**
                     * the username to present
                     */
                    username: string;
                    /**
                     * the password to use in basic auth
                     */
                    password?: string;
                    /**
                     * the file to load the password from
                     */
                    password_file?: string;
                };
                /**
                 * optional `Authorization` header configuration
                 */
                authorization?: {
                    /**
                     * the authentication type
                     */
                    type?: string;
                    /**
                     * the credendials to present
                     */
                    credentials?: string;
                    /**
                     * the file to load the credentials from
                     */
                    credentials_file?: string;
                };
                /**
                 * configure using OAuth2 to authenticate to a server
                 */
                oauth2?: {
                    /**
                     * the client ID to present
                     */
                    client_id: string;
                    /**
                     * the client secret to present
                     */
                    client_secret?: string;
                    /**
                     * the file that contains the client secret to present. Mutually exclusive with `client_secret
                     */
                    client_secret_file?: string;
                    /**
                     * the scopes for the token request
                     */
                    scopes?: Array<string>;
                    /**
                     * the URL to fetch the token from
                     */
                    token_url: string;
                    /**
                     * Optional parameters to append to the token URL
                     */
                    endpoint_params?: Array<string>;
                    /**
                     * Configures the token requests TLS settings
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                    /**
                     * Optional proxy URL
                     */
                    proxy_url?: string;
                    /**
                     * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header: {
                        [key: string]: Array<string>;
                    };
                };
                /**
                 * if true, send requests with HTTP2
                 */
                enable_http2?: boolean;
                /**
                 * the url to use to proxy requests
                 */
                proxy_url?: string;
                /**
                 * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                 */
                no_proxy?: string;
                /**
                 * Use proxy URL indicated by environment variables
                 */
                proxy_from_environment?: boolean;
                /**
                 * Specifies headers to send to proxies during CONNECT requests
                 */
                proxy_connect_header?: {
                    [key: string]: Array<string>;
                };
                /**
                 * if true, follow HTTP 3xx redirects
                 */
                follow_redirects?: boolean;
                /**
                 * configure TLS when making requests
                 */
                tls_config?: {
                    /**
                     * the file that contains a CA cert to verify requests with
                     */
                    ca_file?: string;
                    /**
                     * the file that contains the client cert to present when making requests
                     */
                    cert_file?: string;
                    /**
                     * the file that contains the private key to use when making requests
                     */
                    key_file?: string;
                    /**
                     * the server name to present when doing client authentication
                     */
                    server_name?: string;
                    /**
                     * if true, don't validate the presented server certificate
                     */
                    insecure_skip_verify?: boolean;
                    /**
                     * the minimum version of TLS to support
                     */
                    min_version?: string;
                    /**
                     * the maximum version of TLS to support
                     */
                    max_version?: string;
                };
            };
            /**
             * resolve_timeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.
             */
            resolve_timeout?: string;
        };
        templates?: Array<string>;
        /**
         * a route to send alerts
         */
        route: {
            /**
             * the receier to send alerts to
             */
            receiver?: string;
            /**
             * The labels by which incoming alerts are grouped together
             */
            group_by?: Array<string>;
            /**
             * If true, any alerts that hit this node will continue matching other nodes along the tree
             */
            continue?: boolean;
            /**
             * A set of equality matchers that an alert has to fulfull to match the node
             * @deprecated
             */
            match?: {
                [key: string]: string;
            };
            /**
             * A set of regex matchers that an alert has to fulfull to match the node
             * @deprecated
             */
            match_re?: {
                [key: string]: string;
            };
            /**
             * A list of matchers than an alert has to fulfill to match the node
             */
            matchers?: Array<string>;
            /**
             * How long to initially wait to send a notification for a group
             */
            group_wait?: string;
            /**
             * How long to wait before sending a notification about new alerts that are added to an existing group of alerts
             */
            group_interval?: string;
            /**
             * How long to wait before resending notifications for alerts that are still active
             */
            repeat_interval?: string;
            /**
             * Times when the route should be muted. These must match the name of a mute time interval defined in the mute_time_intervals section
             */
            mute_time_intervals?: Array<string>;
            /**
             * Times when the route should be active. These must match the name of a time interval defined in the time_intervals section.
             */
            active_time_intervals?: Array<string>;
            /**
             * the routes below this one in the tree
             */
            routes?: Array<{
                [key: string]: unknown;
            }>;
        };
        receivers?: Array<{
            /**
             * the name of the receiver
             */
            name: string;
            discord_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the discord webhook URL
                 */
                webhook_url?: string;
                /**
                 * the file to load the discord webhook URL
                 */
                webhook_url_file?: string;
                /**
                 * the template to use for the message title
                 */
                title?: string;
                /**
                 * the template to use for the message body
                 */
                message?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            email_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the email address to send notification to
                 */
                to: string;
                /**
                 * the senders address
                 */
                from?: string;
                /**
                 * The SMTP host through which emails are sent
                 */
                smarthost?: string;
                /**
                 * the hostname to identify to the SMTP server
                 */
                hello?: string;
                /**
                 * the username to use to authenticate to the SMTP server
                 */
                auth_username?: string;
                /**
                 * the pass to use to authenticate to the SMTP server
                 */
                auth_password?: string;
                /**
                 * the file from which to load the password to use to authenticate to the SMTP server
                 */
                auth_password_file?: string;
                /**
                 * the auth secret to use when authenticating to the SMTP server
                 */
                auth_secret?: string;
                /**
                 * the auth identity to use when authenticating to the SMTP server
                 */
                auth_identity?: string;
                /**
                 * if true, enforce that we require TLS when talking to the SMTP server
                 */
                require_tls?: boolean;
                /**
                 * configure TLS when making requests
                 */
                tls_config?: {
                    /**
                     * the file that contains a CA cert to verify requests with
                     */
                    ca_file?: string;
                    /**
                     * the file that contains the client cert to present when making requests
                     */
                    cert_file?: string;
                    /**
                     * the file that contains the private key to use when making requests
                     */
                    key_file?: string;
                    /**
                     * the server name to present when doing client authentication
                     */
                    server_name?: string;
                    /**
                     * if true, don't validate the presented server certificate
                     */
                    insecure_skip_verify?: boolean;
                    /**
                     * the minimum version of TLS to support
                     */
                    min_version?: string;
                    /**
                     * the maximum version of TLS to support
                     */
                    max_version?: string;
                };
                /**
                 * the template to use when generating an HTML email
                 */
                html?: string;
                /**
                 * the template to use when generating an text email
                 */
                text?: string;
                /**
                 * the headers to send to the SMTP server
                 */
                headers?: {
                    [key: string]: string;
                };
            }>;
            msteams_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the incoming webhook URL
                 */
                webhook_url?: string;
                /**
                 * the file to load the incoming webhook from
                 */
                webhook_url_file?: string;
                /**
                 * the template to use for the message title
                 */
                title?: string;
                /**
                 * the template to use for the message summary
                 */
                summary?: string;
                /**
                 * the template to use for the message body
                 */
                text?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            opsgenie_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the API key to use when talking to the OpsGenie API
                 */
                api_key?: string;
                /**
                 * the file to load the API key to use when talking to the OpsGenie API
                 */
                api_key_file?: string;
                /**
                 * the API URL to use when talking to the OpsGenie API
                 */
                api_url?: string;
                /**
                 * the template to use for the alert message
                 */
                message?: string;
                /**
                 * the template to use for the alert description
                 */
                description?: string;
                /**
                 * a template to use for the backlink to the sender of the alert
                 */
                source?: string;
                /**
                 * a set of arbitrary key/value pairs that provide further details about the alert
                 */
                details?: {
                    [key: string]: string;
                };
                responders?: Array<{
                    /**
                     * the ID of the responder to send to
                     */
                    id?: string;
                    /**
                     * the name of the responder to send to
                     */
                    name?: string;
                    /**
                     * the username of the responder to send to
                     */
                    username?: string;
                    /**
                     * the type of the responder to send to
                     */
                    type: string;
                }>;
                /**
                 * comma seperated list of tags attached to notifications
                 */
                tags?: string;
                /**
                 * additional alert note
                 */
                note?: string;
                /**
                 * priority level of the alert
                 */
                priority?: 'P1' | 'P2' | 'P3' | 'P4' | 'P5';
                /**
                 * whether to update the message and description of the alert in OpsGenic if it already exists
                 */
                update_alerts?: boolean;
                /**
                 * optional field that cna be used to specify which domain alert is related to
                 */
                entity?: string;
                /**
                 * Comma seperated list of actions that will be available for the alert
                 */
                actions?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            pagerduty_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the routing key to use when sending alerts
                 */
                routing_key?: string;
                /**
                 * the file from which to load the routing key to use when sending alerts
                 */
                routing_key_file?: string;
                /**
                 * The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).
                 */
                service_key?: string;
                /**
                 * the file from which to load the routing key to use when sending alerts
                 */
                service_key_file?: string;
                /**
                 * the URL to send API requests to
                 */
                url?: string;
                /**
                 * the template to use for the client identication of the Alertmanager
                 */
                client?: string;
                /**
                 * the template to use for the backlink to the sender of the notification
                 */
                client_url?: string;
                /**
                 * the template to use for the description of the incident
                 */
                description?: string;
                /**
                 * the severity of the incident
                 */
                severity?: 'critical' | 'error' | 'warning' | 'lite';
                /**
                 * unique location of the affected system
                 */
                source?: string;
                /**
                 * A set of arbitrary KV pair that provide further detail about the incident.
                 */
                details?: {
                    [key: string]: string;
                };
                images?: Array<{
                    /**
                     * Optional URL; makes the image a clickable link.
                     */
                    href?: string;
                    /**
                     * The source (URL) of the image being attached to the incident. This image must be served via HTTPS.
                     */
                    src?: string;
                    /**
                     * The alt text of the image
                     */
                    alt?: string;
                }>;
                links?: Array<{
                    /**
                     * URL of the link to be attached.
                     */
                    href?: string;
                    /**
                     * Plain text that describes the purpose of the link, and can be used as the link's text.
                     */
                    text?: string;
                }>;
                /**
                 * the part or component of the affected system that is broken
                 */
                component?: string;
                /**
                 * a cluster or grouping of services
                 */
                group?: string;
                /**
                 * the class/type of the event
                 */
                class?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            pushover_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the recipient users key
                 */
                user_key?: string;
                /**
                 * the file to load the recipient users key from
                 */
                user_key_file?: string;
                /**
                 * the registered applications API token
                 */
                token?: string;
                /**
                 * the  file to load the registered applications API token from
                 */
                token_file?: string;
                /**
                 * the  template to use for the notification title
                 */
                title?: string;
                /**
                 * the  template to use for the notification message
                 */
                message?: string;
                /**
                 * the  template to use for a supplementary URL shown alongside the message
                 */
                url?: string;
                /**
                 * optional device to send notification to
                 */
                device?: string;
                /**
                 * optional sound to use for the notification
                 */
                sound?: string;
                /**
                 * the template to use for the priority of the alert
                 */
                priority?: string;
                /**
                 * how often the pushover servers will send the same notification to the user
                 */
                retry?: string;
                /**
                 * how long your notification will continue to be retried for, unless the user acknowledges the notification
                 */
                expire?: string;
                /**
                 * a string duration
                 */
                ttl?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            slack_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the slack webhook URL
                 */
                api_url?: string;
                /**
                 * the file to load the slack webhook URL from
                 */
                api_url_file?: string;
                /**
                 * the channel to send alerts to
                 */
                channel: string;
                /**
                 * an emoji to use as the icon
                 */
                icon_emoji?: string;
                /**
                 * a url to the icon to use for the alert
                 */
                icon_url?: string;
                /**
                 * if true, link any @'s in the message
                 */
                link_names?: boolean;
                /**
                 * a template that indicates the username to use
                 */
                username?: string;
                actions?: Array<{
                    /**
                     * the text for the action
                     */
                    text: string;
                    /**
                     * the type of the action
                     */
                    type: string;
                    /**
                     * the URL to trigger the action
                     */
                    url?: string;
                    /**
                     * the name of the action
                     */
                    name?: string;
                    value?: string;
                    /**
                     * configurations for confirming the action
                     */
                    confirm?: {
                        /**
                         * the text of the action
                         */
                        text: string;
                        /**
                         * the text of the dismiss action
                         */
                        dismiss_text?: string;
                        /**
                         * the text of the ok action
                         */
                        ok_text?: string;
                        /**
                         * the text of the title
                         */
                        title?: string;
                    };
                    /**
                     * the style to apply to the action
                     */
                    style?: string;
                }>;
                /**
                 * a template that indicates the callback to call
                 */
                callback_id?: string;
                /**
                 * a template that indicates the color to use for the alert
                 */
                color?: string;
                /**
                 * a fallback message displayed in notifications
                 */
                fallback?: string;
                /**
                 * the fields of the message
                 */
                fields?: Array<{
                    /**
                     * the name of the field
                     */
                    title: string;
                    /**
                     * the value for the action
                     */
                    value: string;
                    /**
                     * TODO
                     */
                    short?: boolean;
                }>;
                /**
                 * the message displayed in the footer
                 */
                footer?: string;
                mrkdwn_in?: Array<string>;
                pretext?: string;
                short_fields?: boolean;
                text?: string;
                title?: string;
                title_link?: string;
                image_url?: string;
                thumb_url?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            sns_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The SNS API URL e.g. https://sns.us-east-2.amazonaws.com
                 */
                api_url: string;
                /**
                 * Configures AWS's Signature Verification 4 signing process to sign requests.
                 */
                sigv4: {
                    /**
                     * The AWS region. Cannot be blank
                     */
                    region: string;
                    /**
                     * The AWS API access key. Both access_key and secret_key must be supplied.
                     */
                    access_key?: string;
                    /**
                     * The AWS API secret key. Both access_key and secret_key must be supplied.
                     */
                    secret_key?: string;
                    /**
                     * Named AWS profile used to authenticate.
                     */
                    profile?: string;
                    /**
                     * AWS Role ARN, an alternative to using AWS API keys.
                     */
                    role_arn?: string;
                };
                /**
                 * SNS topic ARN, e.g. arn:aws:sns:us-east-2:698519295917:My-Topic
                 */
                topic_arn?: string;
                /**
                 * Subject line when the message is delivered to email endpoints.
                 */
                subject?: string;
                /**
                 * Phone number if message is delivered via SMS in E.164 format.
                 */
                phone_number?: string;
                /**
                 * The mobile platform endpoint ARN if message is delivered via mobile notifications.
                 */
                target_arn?: string;
                /**
                 * The message content of the SNS notification.
                 */
                message?: string;
                /**
                 * SNS message attributes.
                 */
                attributes?: {
                    [key: string]: string;
                };
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            telegram_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The Telegram API URL e.g. https://api.telegram.org. If not specified, default API URL will be used.
                 */
                api_url?: string;
                /**
                 * Telegram bot token. It is mutually exclusive with `bot_token_file`.
                 */
                bot_token?: string;
                /**
                 * Read the Telegram bot token from a file. It is mutually exclusive with `bot_token`.
                 */
                bot_token_file?: string;
                /**
                 * ID of the chat where to send the messages.
                 */
                chat_id?: number;
                /**
                 * Message template.
                 */
                message?: string;
                /**
                 * Whether or not to disable telegram notifications
                 */
                disable_notifications?: boolean;
                /**
                 * Parse mode for telegram message, supported values are MarkdownV2, Markdown, HTML and empty string for plain text.
                 */
                parse_mode?: 'MarkdownV2' | 'Markdown' | 'HTML' | '';
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            victorops_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The API key to use when talking to the VictorOps API. It is mutually exclusive with `api_key_file`.
                 */
                api_key?: string;
                /**
                 * Reads the API key to use when talking to the VictorOps API from a file. It is mutually exclusive with `api_key`.
                 */
                api_key_file?: string;
                /**
                 * The VictorOps API URL.
                 */
                api_url?: string;
                /**
                 * A key used to map the alert to a team.
                 */
                routing_key: string;
                /**
                 * Describes the behavior of the alert (CRITICAL, WARNING, INFO).
                 */
                message_type?: 'CRITICAL' | 'WARNING' | 'INFO';
                /**
                 * Contains summary of the alerted problem.
                 */
                entire_display_name?: string;
                /**
                 * Contains long explanation of the alerted problem.
                 */
                state_message?: string;
                /**
                 * The monitoring tool the state message is from.
                 */
                monitoring_tool?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            webex_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The Webex Teams API URL e.g. https://webexapis.com/v1/messages
                 */
                api_url?: string;
                /**
                 * ID of the Webex Teams room where to send the messages.
                 */
                room_id: string;
                /**
                 * Message template.
                 */
                message?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            webhook_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the endpoint to send HTTP POST requests to. Mutually exclusive with url_file
                 */
                url?: string;
                /**
                 * the endpoint to send HTTP POST requests to, as read from a file. Mutually exclusive with url_file
                 */
                url_file?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
                /**
                 * The maximum number of alerts to include in a single webhook message. Alerts  above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.
                 */
                max_alerts?: number;
            }>;
            wechat_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The API key to use when talking to the WeChat API.
                 */
                api_secret?: string;
                /**
                 * The WeChat API URL.
                 */
                api_url?: string;
                /**
                 * The corp id for authentication.
                 */
                corp_id?: string;
                /**
                 * API request data as defined by the WeChat API.
                 */
                message?: string;
                /**
                 * Type of the message type, supported values are `text` and `markdown`.
                 */
                message_type?: 'text' | 'markdown';
                /**
                 * the ID of the agent to send messages as
                 */
                agent_id?: string;
                /**
                 * the ID of the user to send messages to
                 */
                to_user?: string;
                /**
                 * the ID of the party so send messages to
                 */
                to_party?: string;
                to_tag?: string;
            }>;
        }>;
        inhibit_rules?: Array<{
            /**
             * DEPRECATED: Use target_matchers.  Matchers that have to be fulfilled in the alerts to be muted.
             * @deprecated
             */
            target_match?: {
                [key: string]: string;
            };
            /**
             * DEPRECATED: Use target_matchers.  Matchers that have to be fulfilled in the alerts to be muted, with values interpreted as a Regex
             * @deprecated
             */
            target_match_re?: {
                [key: string]: string;
            };
            /**
             * A list of matchers that have to be fulfilled by the target alerts to be muted.
             */
            target_matchers?: Array<string>;
            /**
             * DEPRECATED: Use source_matchers. Matchers for which one or more alerts have to exist for the inhibition to take effect.
             * @deprecated
             */
            source_match?: {
                [key: string]: string;
            };
            /**
             * DEPRECATED: Use source_matchers. Matchers for which one or more alerts have to exist for the inhibition to take effect, with values interpreted as a Regex
             * @deprecated
             */
            source_match_re?: {
                [key: string]: string;
            };
            /**
             * A list of matchers for which one or more alerts have to exist for the inhibition to take effect.
             */
            source_matchers?: Array<string>;
            /**
             * Labels that must have an equal value in the source and target alert for the inhibition to take effect.
             */
            equal?: Array<string>;
        }>;
        mute_time_intervals?: Array<{
            /**
             * the name of the time interval
             */
            name: string;
            time_intervals: Array<{
                times?: Array<{
                    /**
                     * A time, in the format of HH:MM
                     */
                    start_time: string;
                    /**
                     * A time, in the format of HH:MM
                     */
                    end_time: string;
                }>;
                weekdays?: Array<string>;
                days_of_month?: Array<string>;
                months?: Array<string>;
                years?: Array<string>;
                /**
                 * the timezone to interpret times in
                 */
                location?: string;
            }>;
        }>;
        time_intervals?: Array<{
            /**
             * the name of the time interval
             */
            name: string;
            time_intervals: Array<{
                times?: Array<{
                    /**
                     * A time, in the format of HH:MM
                     */
                    start_time: string;
                    /**
                     * A time, in the format of HH:MM
                     */
                    end_time: string;
                }>;
                weekdays?: Array<string>;
                days_of_month?: Array<string>;
                months?: Array<string>;
                years?: Array<string>;
                /**
                 * the timezone to interpret times in
                 */
                location?: string;
            }>;
        }>;
    };
};

export type GetConfigResponse = GetConfigResponses[keyof GetConfigResponses];

export type PostConfigData = {
    /**
     * An Alertmanager compatible config file
     */
    body?: {
        /**
         * the global configs, used as defaults in all receivers
         */
        global?: {
            /**
             * The default SMTP `from` header field.
             */
            smtp_from?: string;
            /**
             * The default SMTP smarthost used for sending emails, including port number.
             */
            smtp_smarthost?: string;
            /**
             * The default hostname to identify to the SMTP server.
             */
            smtp_hello?: string;
            /**
             * SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
             */
            smtp_auth_username?: string;
            /**
             * The password to use to authenticate against the SMTP server, using PLAIN. Mutually exclusive with smtp_auth_password_file
             */
            smtp_auth_password?: string;
            /**
             * The password to use to authenticate against the SMTP server, loaded from a file, using PLAIN. Mutually exclusive with smtp_auth_password_file
             */
            smtp_auth_password_file?: string;
            /**
             * SMTP Auth using PLAIN.
             */
            smtp_auth_identity?: string;
            /**
             * SMTP Auth using CRAM-MD5.
             */
            smtp_auth_secret?: string;
            /**
             * The default SMTP TLS requirement.
             */
            smtp_require_tls?: boolean;
            /**
             * The default URL to use when sending messages to slack
             */
            slack_api_url?: string;
            /**
             * The default URL to use when sending messages to slack, loaded from a file
             */
            slack_api_url_file?: string;
            /**
             * The default api key to use when sending messages to victorops
             */
            victorops_api_key?: string;
            /**
             * The default api key to use when sending messages to victorops, loaded from a file
             */
            victorops_api_key_file?: string;
            /**
             * The default URL to use when sending messages to VictorOps
             */
            victorops_api_url?: string;
            /**
             * The default URL to use when sending messages to Pagerduty
             */
            pagerduty_url?: string;
            /**
             * The default API Key to use when sending messages to OpsGenie
             */
            opsgenie_api_key?: string;
            /**
             * The default API Key to use when sending messages to OpsGenie, loaded from a file
             */
            opsgenie_api_key_file?: string;
            /**
             * The default URL to use when sending messages to OpsGenie
             */
            opsgenie_api_url?: string;
            /**
             * The default URL to use when sending messages to WeChat
             */
            wechat_api_url?: string;
            /**
             * The default API Key to use when sending messages to WeChat
             */
            wechat_api_secret?: string;
            /**
             * The default Corp ID to use when sending messages to WeChat
             */
            wechat_api_corp_id?: string;
            /**
             * The default URL to use when sending messages to Telegram
             */
            telegram_api_url?: string;
            /**
             * The default URL to use when sending messages to WebEx
             */
            webex_api_url?: string;
            /**
             * settings to configure the behaviour of HTTP requests
             */
            http_config?: {
                /**
                 * Sets the `Authorization` header with the configured username and password
                 */
                basic_auth?: {
                    /**
                     * the username to present
                     */
                    username: string;
                    /**
                     * the password to use in basic auth
                     */
                    password?: string;
                    /**
                     * the file to load the password from
                     */
                    password_file?: string;
                };
                /**
                 * optional `Authorization` header configuration
                 */
                authorization?: {
                    /**
                     * the authentication type
                     */
                    type?: string;
                    /**
                     * the credendials to present
                     */
                    credentials?: string;
                    /**
                     * the file to load the credentials from
                     */
                    credentials_file?: string;
                };
                /**
                 * configure using OAuth2 to authenticate to a server
                 */
                oauth2?: {
                    /**
                     * the client ID to present
                     */
                    client_id: string;
                    /**
                     * the client secret to present
                     */
                    client_secret?: string;
                    /**
                     * the file that contains the client secret to present. Mutually exclusive with `client_secret
                     */
                    client_secret_file?: string;
                    /**
                     * the scopes for the token request
                     */
                    scopes?: Array<string>;
                    /**
                     * the URL to fetch the token from
                     */
                    token_url: string;
                    /**
                     * Optional parameters to append to the token URL
                     */
                    endpoint_params?: Array<string>;
                    /**
                     * Configures the token requests TLS settings
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                    /**
                     * Optional proxy URL
                     */
                    proxy_url?: string;
                    /**
                     * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header: {
                        [key: string]: Array<string>;
                    };
                };
                /**
                 * if true, send requests with HTTP2
                 */
                enable_http2?: boolean;
                /**
                 * the url to use to proxy requests
                 */
                proxy_url?: string;
                /**
                 * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                 */
                no_proxy?: string;
                /**
                 * Use proxy URL indicated by environment variables
                 */
                proxy_from_environment?: boolean;
                /**
                 * Specifies headers to send to proxies during CONNECT requests
                 */
                proxy_connect_header?: {
                    [key: string]: Array<string>;
                };
                /**
                 * if true, follow HTTP 3xx redirects
                 */
                follow_redirects?: boolean;
                /**
                 * configure TLS when making requests
                 */
                tls_config?: {
                    /**
                     * the file that contains a CA cert to verify requests with
                     */
                    ca_file?: string;
                    /**
                     * the file that contains the client cert to present when making requests
                     */
                    cert_file?: string;
                    /**
                     * the file that contains the private key to use when making requests
                     */
                    key_file?: string;
                    /**
                     * the server name to present when doing client authentication
                     */
                    server_name?: string;
                    /**
                     * if true, don't validate the presented server certificate
                     */
                    insecure_skip_verify?: boolean;
                    /**
                     * the minimum version of TLS to support
                     */
                    min_version?: string;
                    /**
                     * the maximum version of TLS to support
                     */
                    max_version?: string;
                };
            };
            /**
             * resolve_timeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.
             */
            resolve_timeout?: string;
        };
        templates?: Array<string>;
        /**
         * a route to send alerts
         */
        route: {
            /**
             * the receier to send alerts to
             */
            receiver?: string;
            /**
             * The labels by which incoming alerts are grouped together
             */
            group_by?: Array<string>;
            /**
             * If true, any alerts that hit this node will continue matching other nodes along the tree
             */
            continue?: boolean;
            /**
             * A set of equality matchers that an alert has to fulfull to match the node
             * @deprecated
             */
            match?: {
                [key: string]: string;
            };
            /**
             * A set of regex matchers that an alert has to fulfull to match the node
             * @deprecated
             */
            match_re?: {
                [key: string]: string;
            };
            /**
             * A list of matchers than an alert has to fulfill to match the node
             */
            matchers?: Array<string>;
            /**
             * How long to initially wait to send a notification for a group
             */
            group_wait?: string;
            /**
             * How long to wait before sending a notification about new alerts that are added to an existing group of alerts
             */
            group_interval?: string;
            /**
             * How long to wait before resending notifications for alerts that are still active
             */
            repeat_interval?: string;
            /**
             * Times when the route should be muted. These must match the name of a mute time interval defined in the mute_time_intervals section
             */
            mute_time_intervals?: Array<string>;
            /**
             * Times when the route should be active. These must match the name of a time interval defined in the time_intervals section.
             */
            active_time_intervals?: Array<string>;
            /**
             * the routes below this one in the tree
             */
            routes?: Array<{
                [key: string]: unknown;
            }>;
        };
        receivers?: Array<{
            /**
             * the name of the receiver
             */
            name: string;
            discord_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the discord webhook URL
                 */
                webhook_url?: string;
                /**
                 * the file to load the discord webhook URL
                 */
                webhook_url_file?: string;
                /**
                 * the template to use for the message title
                 */
                title?: string;
                /**
                 * the template to use for the message body
                 */
                message?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            email_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the email address to send notification to
                 */
                to: string;
                /**
                 * the senders address
                 */
                from?: string;
                /**
                 * The SMTP host through which emails are sent
                 */
                smarthost?: string;
                /**
                 * the hostname to identify to the SMTP server
                 */
                hello?: string;
                /**
                 * the username to use to authenticate to the SMTP server
                 */
                auth_username?: string;
                /**
                 * the pass to use to authenticate to the SMTP server
                 */
                auth_password?: string;
                /**
                 * the file from which to load the password to use to authenticate to the SMTP server
                 */
                auth_password_file?: string;
                /**
                 * the auth secret to use when authenticating to the SMTP server
                 */
                auth_secret?: string;
                /**
                 * the auth identity to use when authenticating to the SMTP server
                 */
                auth_identity?: string;
                /**
                 * if true, enforce that we require TLS when talking to the SMTP server
                 */
                require_tls?: boolean;
                /**
                 * configure TLS when making requests
                 */
                tls_config?: {
                    /**
                     * the file that contains a CA cert to verify requests with
                     */
                    ca_file?: string;
                    /**
                     * the file that contains the client cert to present when making requests
                     */
                    cert_file?: string;
                    /**
                     * the file that contains the private key to use when making requests
                     */
                    key_file?: string;
                    /**
                     * the server name to present when doing client authentication
                     */
                    server_name?: string;
                    /**
                     * if true, don't validate the presented server certificate
                     */
                    insecure_skip_verify?: boolean;
                    /**
                     * the minimum version of TLS to support
                     */
                    min_version?: string;
                    /**
                     * the maximum version of TLS to support
                     */
                    max_version?: string;
                };
                /**
                 * the template to use when generating an HTML email
                 */
                html?: string;
                /**
                 * the template to use when generating an text email
                 */
                text?: string;
                /**
                 * the headers to send to the SMTP server
                 */
                headers?: {
                    [key: string]: string;
                };
            }>;
            msteams_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the incoming webhook URL
                 */
                webhook_url?: string;
                /**
                 * the file to load the incoming webhook from
                 */
                webhook_url_file?: string;
                /**
                 * the template to use for the message title
                 */
                title?: string;
                /**
                 * the template to use for the message summary
                 */
                summary?: string;
                /**
                 * the template to use for the message body
                 */
                text?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            opsgenie_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the API key to use when talking to the OpsGenie API
                 */
                api_key?: string;
                /**
                 * the file to load the API key to use when talking to the OpsGenie API
                 */
                api_key_file?: string;
                /**
                 * the API URL to use when talking to the OpsGenie API
                 */
                api_url?: string;
                /**
                 * the template to use for the alert message
                 */
                message?: string;
                /**
                 * the template to use for the alert description
                 */
                description?: string;
                /**
                 * a template to use for the backlink to the sender of the alert
                 */
                source?: string;
                /**
                 * a set of arbitrary key/value pairs that provide further details about the alert
                 */
                details?: {
                    [key: string]: string;
                };
                responders?: Array<{
                    /**
                     * the ID of the responder to send to
                     */
                    id?: string;
                    /**
                     * the name of the responder to send to
                     */
                    name?: string;
                    /**
                     * the username of the responder to send to
                     */
                    username?: string;
                    /**
                     * the type of the responder to send to
                     */
                    type: string;
                }>;
                /**
                 * comma seperated list of tags attached to notifications
                 */
                tags?: string;
                /**
                 * additional alert note
                 */
                note?: string;
                /**
                 * priority level of the alert
                 */
                priority?: 'P1' | 'P2' | 'P3' | 'P4' | 'P5';
                /**
                 * whether to update the message and description of the alert in OpsGenic if it already exists
                 */
                update_alerts?: boolean;
                /**
                 * optional field that cna be used to specify which domain alert is related to
                 */
                entity?: string;
                /**
                 * Comma seperated list of actions that will be available for the alert
                 */
                actions?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            pagerduty_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the routing key to use when sending alerts
                 */
                routing_key?: string;
                /**
                 * the file from which to load the routing key to use when sending alerts
                 */
                routing_key_file?: string;
                /**
                 * The PagerDuty integration key (when using PagerDuty integration type `Prometheus`).
                 */
                service_key?: string;
                /**
                 * the file from which to load the routing key to use when sending alerts
                 */
                service_key_file?: string;
                /**
                 * the URL to send API requests to
                 */
                url?: string;
                /**
                 * the template to use for the client identication of the Alertmanager
                 */
                client?: string;
                /**
                 * the template to use for the backlink to the sender of the notification
                 */
                client_url?: string;
                /**
                 * the template to use for the description of the incident
                 */
                description?: string;
                /**
                 * the severity of the incident
                 */
                severity?: 'critical' | 'error' | 'warning' | 'lite';
                /**
                 * unique location of the affected system
                 */
                source?: string;
                /**
                 * A set of arbitrary KV pair that provide further detail about the incident.
                 */
                details?: {
                    [key: string]: string;
                };
                images?: Array<{
                    /**
                     * Optional URL; makes the image a clickable link.
                     */
                    href?: string;
                    /**
                     * The source (URL) of the image being attached to the incident. This image must be served via HTTPS.
                     */
                    src?: string;
                    /**
                     * The alt text of the image
                     */
                    alt?: string;
                }>;
                links?: Array<{
                    /**
                     * URL of the link to be attached.
                     */
                    href?: string;
                    /**
                     * Plain text that describes the purpose of the link, and can be used as the link's text.
                     */
                    text?: string;
                }>;
                /**
                 * the part or component of the affected system that is broken
                 */
                component?: string;
                /**
                 * a cluster or grouping of services
                 */
                group?: string;
                /**
                 * the class/type of the event
                 */
                class?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            pushover_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the recipient users key
                 */
                user_key?: string;
                /**
                 * the file to load the recipient users key from
                 */
                user_key_file?: string;
                /**
                 * the registered applications API token
                 */
                token?: string;
                /**
                 * the  file to load the registered applications API token from
                 */
                token_file?: string;
                /**
                 * the  template to use for the notification title
                 */
                title?: string;
                /**
                 * the  template to use for the notification message
                 */
                message?: string;
                /**
                 * the  template to use for a supplementary URL shown alongside the message
                 */
                url?: string;
                /**
                 * optional device to send notification to
                 */
                device?: string;
                /**
                 * optional sound to use for the notification
                 */
                sound?: string;
                /**
                 * the template to use for the priority of the alert
                 */
                priority?: string;
                /**
                 * how often the pushover servers will send the same notification to the user
                 */
                retry?: string;
                /**
                 * how long your notification will continue to be retried for, unless the user acknowledges the notification
                 */
                expire?: string;
                /**
                 * a string duration
                 */
                ttl?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            slack_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the slack webhook URL
                 */
                api_url?: string;
                /**
                 * the file to load the slack webhook URL from
                 */
                api_url_file?: string;
                /**
                 * the channel to send alerts to
                 */
                channel: string;
                /**
                 * an emoji to use as the icon
                 */
                icon_emoji?: string;
                /**
                 * a url to the icon to use for the alert
                 */
                icon_url?: string;
                /**
                 * if true, link any @'s in the message
                 */
                link_names?: boolean;
                /**
                 * a template that indicates the username to use
                 */
                username?: string;
                actions?: Array<{
                    /**
                     * the text for the action
                     */
                    text: string;
                    /**
                     * the type of the action
                     */
                    type: string;
                    /**
                     * the URL to trigger the action
                     */
                    url?: string;
                    /**
                     * the name of the action
                     */
                    name?: string;
                    value?: string;
                    /**
                     * configurations for confirming the action
                     */
                    confirm?: {
                        /**
                         * the text of the action
                         */
                        text: string;
                        /**
                         * the text of the dismiss action
                         */
                        dismiss_text?: string;
                        /**
                         * the text of the ok action
                         */
                        ok_text?: string;
                        /**
                         * the text of the title
                         */
                        title?: string;
                    };
                    /**
                     * the style to apply to the action
                     */
                    style?: string;
                }>;
                /**
                 * a template that indicates the callback to call
                 */
                callback_id?: string;
                /**
                 * a template that indicates the color to use for the alert
                 */
                color?: string;
                /**
                 * a fallback message displayed in notifications
                 */
                fallback?: string;
                /**
                 * the fields of the message
                 */
                fields?: Array<{
                    /**
                     * the name of the field
                     */
                    title: string;
                    /**
                     * the value for the action
                     */
                    value: string;
                    /**
                     * TODO
                     */
                    short?: boolean;
                }>;
                /**
                 * the message displayed in the footer
                 */
                footer?: string;
                mrkdwn_in?: Array<string>;
                pretext?: string;
                short_fields?: boolean;
                text?: string;
                title?: string;
                title_link?: string;
                image_url?: string;
                thumb_url?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            sns_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The SNS API URL e.g. https://sns.us-east-2.amazonaws.com
                 */
                api_url: string;
                /**
                 * Configures AWS's Signature Verification 4 signing process to sign requests.
                 */
                sigv4: {
                    /**
                     * The AWS region. Cannot be blank
                     */
                    region: string;
                    /**
                     * The AWS API access key. Both access_key and secret_key must be supplied.
                     */
                    access_key?: string;
                    /**
                     * The AWS API secret key. Both access_key and secret_key must be supplied.
                     */
                    secret_key?: string;
                    /**
                     * Named AWS profile used to authenticate.
                     */
                    profile?: string;
                    /**
                     * AWS Role ARN, an alternative to using AWS API keys.
                     */
                    role_arn?: string;
                };
                /**
                 * SNS topic ARN, e.g. arn:aws:sns:us-east-2:698519295917:My-Topic
                 */
                topic_arn?: string;
                /**
                 * Subject line when the message is delivered to email endpoints.
                 */
                subject?: string;
                /**
                 * Phone number if message is delivered via SMS in E.164 format.
                 */
                phone_number?: string;
                /**
                 * The mobile platform endpoint ARN if message is delivered via mobile notifications.
                 */
                target_arn?: string;
                /**
                 * The message content of the SNS notification.
                 */
                message?: string;
                /**
                 * SNS message attributes.
                 */
                attributes?: {
                    [key: string]: string;
                };
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            telegram_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The Telegram API URL e.g. https://api.telegram.org. If not specified, default API URL will be used.
                 */
                api_url?: string;
                /**
                 * Telegram bot token. It is mutually exclusive with `bot_token_file`.
                 */
                bot_token?: string;
                /**
                 * Read the Telegram bot token from a file. It is mutually exclusive with `bot_token`.
                 */
                bot_token_file?: string;
                /**
                 * ID of the chat where to send the messages.
                 */
                chat_id?: number;
                /**
                 * Message template.
                 */
                message?: string;
                /**
                 * Whether or not to disable telegram notifications
                 */
                disable_notifications?: boolean;
                /**
                 * Parse mode for telegram message, supported values are MarkdownV2, Markdown, HTML and empty string for plain text.
                 */
                parse_mode?: 'MarkdownV2' | 'Markdown' | 'HTML' | '';
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            victorops_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The API key to use when talking to the VictorOps API. It is mutually exclusive with `api_key_file`.
                 */
                api_key?: string;
                /**
                 * Reads the API key to use when talking to the VictorOps API from a file. It is mutually exclusive with `api_key`.
                 */
                api_key_file?: string;
                /**
                 * The VictorOps API URL.
                 */
                api_url?: string;
                /**
                 * A key used to map the alert to a team.
                 */
                routing_key: string;
                /**
                 * Describes the behavior of the alert (CRITICAL, WARNING, INFO).
                 */
                message_type?: 'CRITICAL' | 'WARNING' | 'INFO';
                /**
                 * Contains summary of the alerted problem.
                 */
                entire_display_name?: string;
                /**
                 * Contains long explanation of the alerted problem.
                 */
                state_message?: string;
                /**
                 * The monitoring tool the state message is from.
                 */
                monitoring_tool?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            webex_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The Webex Teams API URL e.g. https://webexapis.com/v1/messages
                 */
                api_url?: string;
                /**
                 * ID of the Webex Teams room where to send the messages.
                 */
                room_id: string;
                /**
                 * Message template.
                 */
                message?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
            }>;
            webhook_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * the endpoint to send HTTP POST requests to. Mutually exclusive with url_file
                 */
                url?: string;
                /**
                 * the endpoint to send HTTP POST requests to, as read from a file. Mutually exclusive with url_file
                 */
                url_file?: string;
                /**
                 * settings to configure the behaviour of HTTP requests
                 */
                http_config?: {
                    /**
                     * Sets the `Authorization` header with the configured username and password
                     */
                    basic_auth?: {
                        /**
                         * the username to present
                         */
                        username: string;
                        /**
                         * the password to use in basic auth
                         */
                        password?: string;
                        /**
                         * the file to load the password from
                         */
                        password_file?: string;
                    };
                    /**
                     * optional `Authorization` header configuration
                     */
                    authorization?: {
                        /**
                         * the authentication type
                         */
                        type?: string;
                        /**
                         * the credendials to present
                         */
                        credentials?: string;
                        /**
                         * the file to load the credentials from
                         */
                        credentials_file?: string;
                    };
                    /**
                     * configure using OAuth2 to authenticate to a server
                     */
                    oauth2?: {
                        /**
                         * the client ID to present
                         */
                        client_id: string;
                        /**
                         * the client secret to present
                         */
                        client_secret?: string;
                        /**
                         * the file that contains the client secret to present. Mutually exclusive with `client_secret
                         */
                        client_secret_file?: string;
                        /**
                         * the scopes for the token request
                         */
                        scopes?: Array<string>;
                        /**
                         * the URL to fetch the token from
                         */
                        token_url: string;
                        /**
                         * Optional parameters to append to the token URL
                         */
                        endpoint_params?: Array<string>;
                        /**
                         * Configures the token requests TLS settings
                         */
                        tls_config?: {
                            /**
                             * the file that contains a CA cert to verify requests with
                             */
                            ca_file?: string;
                            /**
                             * the file that contains the client cert to present when making requests
                             */
                            cert_file?: string;
                            /**
                             * the file that contains the private key to use when making requests
                             */
                            key_file?: string;
                            /**
                             * the server name to present when doing client authentication
                             */
                            server_name?: string;
                            /**
                             * if true, don't validate the presented server certificate
                             */
                            insecure_skip_verify?: boolean;
                            /**
                             * the minimum version of TLS to support
                             */
                            min_version?: string;
                            /**
                             * the maximum version of TLS to support
                             */
                            max_version?: string;
                        };
                        /**
                         * Optional proxy URL
                         */
                        proxy_url?: string;
                        /**
                         * Comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers.
                         */
                        no_proxy?: string;
                        /**
                         * Use proxy URL indicated by environment variables
                         */
                        proxy_from_environment?: boolean;
                        /**
                         * Specifies headers to send to proxies during CONNECT requests
                         */
                        proxy_connect_header: {
                            [key: string]: Array<string>;
                        };
                    };
                    /**
                     * if true, send requests with HTTP2
                     */
                    enable_http2?: boolean;
                    /**
                     * the url to use to proxy requests
                     */
                    proxy_url?: string;
                    /**
                     * comma-seperated string that can contain IPs, CIDR notation, domain names that should be excluded from proxying. IP and domain names can contain port numbers
                     */
                    no_proxy?: string;
                    /**
                     * Use proxy URL indicated by environment variables
                     */
                    proxy_from_environment?: boolean;
                    /**
                     * Specifies headers to send to proxies during CONNECT requests
                     */
                    proxy_connect_header?: {
                        [key: string]: Array<string>;
                    };
                    /**
                     * if true, follow HTTP 3xx redirects
                     */
                    follow_redirects?: boolean;
                    /**
                     * configure TLS when making requests
                     */
                    tls_config?: {
                        /**
                         * the file that contains a CA cert to verify requests with
                         */
                        ca_file?: string;
                        /**
                         * the file that contains the client cert to present when making requests
                         */
                        cert_file?: string;
                        /**
                         * the file that contains the private key to use when making requests
                         */
                        key_file?: string;
                        /**
                         * the server name to present when doing client authentication
                         */
                        server_name?: string;
                        /**
                         * if true, don't validate the presented server certificate
                         */
                        insecure_skip_verify?: boolean;
                        /**
                         * the minimum version of TLS to support
                         */
                        min_version?: string;
                        /**
                         * the maximum version of TLS to support
                         */
                        max_version?: string;
                    };
                };
                /**
                 * The maximum number of alerts to include in a single webhook message. Alerts  above this threshold are truncated. When leaving this at its default value of 0, all alerts are included.
                 */
                max_alerts?: number;
            }>;
            wechat_configs?: Array<{
                /**
                 * whether to notify about resolved alerts
                 */
                send_resolved?: boolean;
                /**
                 * The API key to use when talking to the WeChat API.
                 */
                api_secret?: string;
                /**
                 * The WeChat API URL.
                 */
                api_url?: string;
                /**
                 * The corp id for authentication.
                 */
                corp_id?: string;
                /**
                 * API request data as defined by the WeChat API.
                 */
                message?: string;
                /**
                 * Type of the message type, supported values are `text` and `markdown`.
                 */
                message_type?: 'text' | 'markdown';
                /**
                 * the ID of the agent to send messages as
                 */
                agent_id?: string;
                /**
                 * the ID of the user to send messages to
                 */
                to_user?: string;
                /**
                 * the ID of the party so send messages to
                 */
                to_party?: string;
                to_tag?: string;
            }>;
        }>;
        inhibit_rules?: Array<{
            /**
             * DEPRECATED: Use target_matchers.  Matchers that have to be fulfilled in the alerts to be muted.
             * @deprecated
             */
            target_match?: {
                [key: string]: string;
            };
            /**
             * DEPRECATED: Use target_matchers.  Matchers that have to be fulfilled in the alerts to be muted, with values interpreted as a Regex
             * @deprecated
             */
            target_match_re?: {
                [key: string]: string;
            };
            /**
             * A list of matchers that have to be fulfilled by the target alerts to be muted.
             */
            target_matchers?: Array<string>;
            /**
             * DEPRECATED: Use source_matchers. Matchers for which one or more alerts have to exist for the inhibition to take effect.
             * @deprecated
             */
            source_match?: {
                [key: string]: string;
            };
            /**
             * DEPRECATED: Use source_matchers. Matchers for which one or more alerts have to exist for the inhibition to take effect, with values interpreted as a Regex
             * @deprecated
             */
            source_match_re?: {
                [key: string]: string;
            };
            /**
             * A list of matchers for which one or more alerts have to exist for the inhibition to take effect.
             */
            source_matchers?: Array<string>;
            /**
             * Labels that must have an equal value in the source and target alert for the inhibition to take effect.
             */
            equal?: Array<string>;
        }>;
        mute_time_intervals?: Array<{
            /**
             * the name of the time interval
             */
            name: string;
            time_intervals: Array<{
                times?: Array<{
                    /**
                     * A time, in the format of HH:MM
                     */
                    start_time: string;
                    /**
                     * A time, in the format of HH:MM
                     */
                    end_time: string;
                }>;
                weekdays?: Array<string>;
                days_of_month?: Array<string>;
                months?: Array<string>;
                years?: Array<string>;
                /**
                 * the timezone to interpret times in
                 */
                location?: string;
            }>;
        }>;
        time_intervals?: Array<{
            /**
             * the name of the time interval
             */
            name: string;
            time_intervals: Array<{
                times?: Array<{
                    /**
                     * A time, in the format of HH:MM
                     */
                    start_time: string;
                    /**
                     * A time, in the format of HH:MM
                     */
                    end_time: string;
                }>;
                weekdays?: Array<string>;
                days_of_month?: Array<string>;
                months?: Array<string>;
                years?: Array<string>;
                /**
                 * the timezone to interpret times in
                 */
                location?: string;
            }>;
        }>;
    };
    path?: never;
    query?: never;
    url: '/api/v1/config';
};

export type PostConfigErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal Server Error
     */
    500: unknown;
};

export type PostConfigResponses = {
    /**
     * Successfully uploaded config
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};